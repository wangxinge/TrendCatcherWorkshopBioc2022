mod.1 = loess(Count ~ Time, data = group.1)
mod.2 = loess(Count ~ Time, data = group.2)
est.1 = predict(mod.1, data.frame(Time = points), se = TRUE)
est.2 = predict(mod.2, data.frame(Time = points), se = TRUE)
dd.1 = data.frame(Time = points, Count = est.1$fit, Group = group.1.name)
dd.2 = data.frame(Time = points, Count = est.2$fit, Group = group.2.name)
output = list(dd.1, dd.2)
return(output)
}
findSigInterval = function(adjusted.pvalue, threshold = 0.05, sign)
{
sig = which(adjusted.pvalue < threshold)
sign = sign[sig]
padj = adjusted.pvalue[sig]
start = numeric()
end = numeric()
p = numeric()
dom = numeric()
if(length(sig) == 0)
{
cat("No Significant Intevals Found \n")
}
else if(length(sig) == 1)
{
start = sig[1]
end = sig [1]
p = padj[1]
dom = sign[1]
}
else
{
start = sig[1]
if((sig[2] - sig[1]) != 1 | sign[2] != sign[1])
{
end = c(end, sig[1])
dom = c(dom, sign[1])
p = c(p, padj[1])
}
for(i in 2:length(sig))
{
if(i != length(sig))
{
if((sig[i] - sig[i-1]) > 1 | sign[i] != sign[i-1])
{
start= c(start, sig[i])
}
if((sig[i+1] - sig[i]) != 1 | sign[i+1] != sign[i])
{
end = c(end, sig[i])
dom = c(dom, sign[i])
p = c(p, mean(adjusted.pvalue[start[length(start)] : end[length(end)]]))
}
}
else
{
if((sig[i]-sig[i-1]) > 1 | sign[i] != sign[i-1])
{
start= c(start, sig[i])
}
end= c(end, sig[i])
dom = c(dom, sign[i])
p = c(p, mean(adjusted.pvalue[start[length(start)] : end[length(end)]]))
}
}
}
return(list(start = start, end = end, pvalue = p, dominant = dom))
}
#' Permuation
#' @export
#'
permutation.new<-function(perm.dat, n.perm = 100, points, parall = FALSE){
## Start permutation
cat("Start Permutation \n")
pp = list()
perm = 0 # to be able to store the value
n.subjects = length(unique(perm.dat$ID))
#cat("# of Subjects = ", n.subjects, "\n")
aggregate.df<-perm.dat
## Run in Parallel
if(parall == TRUE) {
max.cores = detectCores()
cat("# cores = ", max.cores, "\n")
desired.cores = max.cores - 1
cl = makeCluster(desired.cores)
registerDoParallel(cl)
}
size<-max(aggregate.df$ID)
pp = llply(1:n.perm, function(j){
perm.dat.1<-aggregate.df
group.perm<-c(rep(1, round(size/2)), rep(2, size - round(size/2)))
group.perm[sample(seq(1, round(size/2)), round(size*0.05), replace = F)]<-2
group.perm[sample(seq(round(size/2)+1, size), round(size*0.05), replace = F)]<-1
rep.times<-as.numeric(table(aggregate.df$ID))
new.group.id<-rep.int(x = group.perm, times = rep.times)
perm.dat.1$Group<-new.group.id
g.1 = perm.dat.1[perm.dat.1$Group == 1, ]
g.2 = perm.dat.1[perm.dat.1$Group == 2, ]
g.min = max(sort(g.1$Time)[1], sort(g.2$Time)[1])
g.max = min(sort(g.1$Time)[length(g.1$Time)], sort(g.2$Time)[length(g.2$Time)])
if(g.min > min(points) | g.max < max(points))
{
cat("Special Case: generated permutation is out of range \n")
assign(paste("Model", j, sep = "_"), NULL)
} else{
group.1<-perm.dat.1 %>% filter(Group == 1)
group.2<-perm.dat.1 %>% filter(Group == 2)
mod.1 = loess(Count ~ Time, data = group.1)
mod.2 = loess(Count ~ Time, data = group.2)
est.1 = predict(mod.1, data.frame(Time = points), se = TRUE)
est.2 = predict(mod.2, data.frame(Time = points), se = TRUE)
dd.1 = data.frame(Time = points, Count = est.1$fit, Group = group.1.name)
dd.2 = data.frame(Time = points, Count = est.2$fit, Group = group.2.name)
perm = list(dd.1, dd.2)
#perm = curveFitting.new(perm.dat.1= perm.dat.1, points = points)
cat("QQQQ")
assign(paste("Model", j, sep = "_"), perm)
}
}, .parallel = parall, .progress = "text", .inform = TRUE,
.paropts = list(.export=ls(.GlobalEnv),
.packages=.packages(all.available=T)))
if(parall == TRUE) {
stopCluster(cl)
}
pp[sapply(pp, is.null)] = NULL
return(pp)
}
areaPermutation.new = function(perm)
{
ar.list = list()
list.len = length(perm)
for (j in 1:list.len)
{
ar.list[[j]] = intervalArea.new(dd.1 = as.data.frame(perm[[j]][1]), dd.2 = as.data.frame(perm[[j]][2]))
}
return(ar.list)
}
area.perm = areaPermutation.new(perm)
a1 = do.call(rbind, area.perm)
a2 = do.call(rbind, a1[,2])
## Calculate AR p-value
pvalue.area = sapply(1:(length(points)-1), function(i){
sum(a2[,i] >= area$ar.abs[i])/length(a2[,i])
} )
cat("p-value Adjustment Method = ", "BH", "\n")
adjusted.pvalue = p.adjust(pvalue.area, method = "BH")
interval = findSigInterval(adjusted.pvalue,
threshold = pvalue.threshold, sign = area$ar.sign)
adjusted.pvalue
pp
pvalue.area
master.list.1 = master.list.severe
master.list.2 = master.list.moderate
ht.1 = ht.severe
pathway = "neutrophil activation"
group.1.name = "severe"
group.2.name = "moderate"
n.perm = 100
parall = F
pvalue.threshold = 0.05
# update
GO.df<-ht.1$GO.df
sub<-GO.df %>% dplyr::filter(Description == pathway)
sub<-sub[1,]
gene.arr.up<-as.character(str_split(sub$geneID_up, "/", simplify = T))
gene.arr.down<-as.character(str_split(sub$geneID_down, "/", simplify = T))
gene.arr<-c(gene.arr.up, gene.arr.down)
gene.arr<-unique(gene.arr[gene.arr!=""])
n.gene<-length(gene.arr)
cat(paste0("Found ", n.gene, " DDEGs from ", pathway, "/n"))
### Center the data to baseline, so we can compare the curves
severe<-return.center(master.list = master.list.1, gene.arr = gene.arr)
moderate<-return.center(master.list = master.list.2, gene.arr = gene.arr)
rep.times<-as.numeric(table(severe$Symbol))
rep.severe<-rep.int(seq(1, length(rep.times)), times = rep.times)
rep.times<-as.numeric(table(moderate$Symbol))
rep.moderate<-rep.int(seq(1, length(rep.times)), times = rep.times)
rep.moderate<-rep.moderate + max(rep.severe)
############################ LOWESS curve fitting]
## prepare df
ID<-c(rep.severe, rep.moderate)
Count<-c(severe$Center.logFC, moderate$Center.logFC)
Time<-c(severe$Time, moderate$Time)
Group<-c(rep(group.1.name,nrow(severe)),rep(group.2.name, nrow(moderate)))
points = seq(min(Time), max(Time), length.out = 100)
Group = as.character(Group)
Count = Count + 1e-8
df = data.frame(Count = Count, Time = Time, Group = Group, ID = ID)
## prepare dat
group.1<-df %>% filter(Group == group.1.name)
group.2<-df %>% filter(Group == group.2.name)
mod.1 = loess(Count ~ Time, data = group.1)
mod.2 = loess(Count ~ Time, data = group.2)
est.1 = predict(mod.1, data.frame(Time = points), se = TRUE)
est.2 = predict(mod.2, data.frame(Time = points), se = TRUE)
dd.1 = data.frame(Time = points, Count = est.1$fit, Group = group.1.name)
dd.2 = data.frame(Time = points, Count = est.2$fit, Group = group.2.name)
### Draw trajectories
dat<-rbind(dd.1, dd.2)
############## Permutation
area = intervalArea.new(dd.1 = dd.1, dd.2 = dd.2)
area
dd.1
plot(dd.1)
plot(x = dd.1$Time, y = dd.1$Count)
lines(x = dd.2$Time, y = dd.2$Count)
rep.times<-as.numeric(table(severe$Symbol))
rep.severe<-rep.int(seq(1, length(rep.times)), times = rep.times)
rep.times<-as.numeric(table(moderate$Symbol))
rep.moderate<-rep.int(seq(1, length(rep.times)), times = rep.times)
rep.moderate<-rep.moderate + max(rep.severe)
############################ LOWESS curve fitting]
## prepare df
ID<-c(rep.severe, rep.moderate)
Count<-c(severe$Center.logFC, moderate$Center.logFC)
Time<-c(severe$Time, moderate$Time)
rep.moderate
moderate$Center.logFC
plot(moderate$Center.logFC)
lines(severe$Center.logFC)
plot(moderate$Center.logFC)
plot(severe$Center.logFC)
ID<-c(rep.severe, rep.moderate)
Count<-c(severe$Center.logFC, moderate$Center.logFC)
Time<-c(severe$Time, moderate$Time)
Group<-c(rep(group.1.name,nrow(severe)),rep(group.2.name, nrow(moderate)))
points = seq(min(Time), max(Time), length.out = 100)
Group = as.character(Group)
Count = Count + 1e-8
df = data.frame(Count = Count, Time = Time, Group = Group, ID = ID)
head(df)
## prepare dat
group.1<-df %>% dplyr::filter(Group == group.1.name)
group.2<-df %>% dplyr::filter(Group == group.2.name)
mod.1 = loess(Count ~ Time, data = group.1)
mod.2 = loess(Count ~ Time, data = group.2)
est.1 = predict(mod.1, data.frame(Time = points), se = TRUE)
est.2 = predict(mod.2, data.frame(Time = points), se = TRUE)
dd.1 = data.frame(Time = points, Count = est.1$fit, Group = group.1.name)
dd.2 = data.frame(Time = points, Count = est.2$fit, Group = group.2.name)
### Draw trajectories
dat<-rbind(dd.1, dd.2)
############## Permutation
area = intervalArea.new(dd.1 = dd.1, dd.2 = dd.2)
area
## Start permutation
cat("Start Permutation \n")
pp = list()
perm = 0 # to be able to store the value
n.subjects = length(unique(df$ID))
#cat("# of Subjects = ", n.subjects, "\n")
aggregate.df<-df
## Run in Parallel
if(parall == TRUE) {
max.cores = detectCores()
cat("# cores = ", max.cores, "\n")
desired.cores = max.cores - 1
cl = makeCluster(desired.cores)
registerDoParallel(cl)
}
size<-max(aggregate.df$ID)
pp = llply(1:n.perm, function(j){
perm.dat.1<-aggregate.df
group.perm<-c(rep(1, round(size/2)), rep(2, size - round(size/2)))
group.perm[sample(seq(1, round(size/2)), round(size*0.05), replace = F)]<-2
group.perm[sample(seq(round(size/2)+1, size), round(size*0.05), replace = F)]<-1
rep.times<-as.numeric(table(aggregate.df$ID))
new.group.id<-rep.int(x = group.perm, times = rep.times)
perm.dat.1$Group<-new.group.id
g.1 = perm.dat.1[perm.dat.1$Group == 1, ]
g.2 = perm.dat.1[perm.dat.1$Group == 2, ]
g.min = max(sort(g.1$Time)[1], sort(g.2$Time)[1])
g.max = min(sort(g.1$Time)[length(g.1$Time)], sort(g.2$Time)[length(g.2$Time)])
if(g.min > min(points) | g.max < max(points))
{
cat("Special Case: generated permutation is out of range \n")
assign(paste("Model", j, sep = "_"), NULL)
} else{
group.1<-perm.dat.1 %>% filter(Group == 1)
group.2<-perm.dat.1 %>% filter(Group == 2)
mod.1 = loess(Count ~ Time, data = group.1)
mod.2 = loess(Count ~ Time, data = group.2)
est.1 = predict(mod.1, data.frame(Time = points), se = TRUE)
est.2 = predict(mod.2, data.frame(Time = points), se = TRUE)
dd.1 = data.frame(Time = points, Count = est.1$fit, Group = group.1.name)
dd.2 = data.frame(Time = points, Count = est.2$fit, Group = group.2.name)
perm = list(dd.1, dd.2)
#perm = curveFitting.new(perm.dat.1= perm.dat.1, points = points)
assign(paste("Model", j, sep = "_"), perm)
}
}, .parallel = parall, .progress = "text", .inform = TRUE,
.paropts = list(.export=ls(.GlobalEnv),
.packages=.packages(all.available=T)))
if(parall == TRUE) {
stopCluster(cl)
}
pp[sapply(pp, is.null)] = NULL
perm<-pp
area.perm = areaPermutation.new(perm)
a1 = do.call(rbind, area.perm)
a2 = do.call(rbind, a1[,2])
## Calculate AR p-value
pvalue.area = sapply(1:(length(points)-1), function(i){
sum(a2[,i] >= area$ar.abs[i])/length(a2[,i])
} )
cat("p-value Adjustment Method = ", "BH", "\n")
adjusted.pvalue = p.adjust(pvalue.area, method = "BH")
interval = findSigInterval(adjusted.pvalue,
threshold = pvalue.threshold, sign = area$ar.sign)
st = points[interval$start]
en = points[interval$end + 1]
#### Draw ggplot and show significant seperation time intervals
install()
install()
library(TrendCatcher)
severe.path<-system.file("extdata", "MasterListSevere.rda", package = "TrendCatcher")
load(severe.path)
moderate.path<-system.file("extdata", "MasterListModerate.rda", package = "TrendCatcher")
load(moderate.path)
ht.path<-system.file("extdata", "htSevere.rda", package = "TrendCatcher")
load(ht.path)
#### To compare DDEGs trajectories from a specific biological pathway
### In this example, we show DDEGs from "neutrophil activation", one of the top enriched timeheatmap biological pathway from severe group
g<-draw_CurveComp(master.list.1 = master.list.severe, master.list.2 = master.list.moderate, ht.1 = ht.severe, pathway = "neutrophil activation",group.1.name = "severe", group.2.name = "moderate")
print(g)
#### Permutation to check which time interval two curves are significantly seperated
perm_output<-draw_CurveComp_Perm(master.list.1 = master.list.severe,
master.list.2 = master.list.moderate,
ht.1 = ht.severe,
pathway = "neutrophil activation",
group.1.name = "severe",
group.2.name = "moderate",
n.perm = 100,
parall = FALSE,
pvalue.threshold = 0.05)
perm_output$plot
document()
build_vignettes(".")
build_vignettes(".", quiet = F)
library(TrendCatcher)
demo.master.list.path<-system.file("extdata", "BrainMasterList_Symbol.rda", package = "TrendCatcher")
load(demo.master.list.path)
if(FALSE){
time_heatmap<-draw_TimeHeatmap_GO(master.list = master.list, logFC.thres = 0, top.n = 10, dyn.gene.p.thres = 0.05, keyType = "SYMBOL", OrgDb = "org.Mm.eg.db", ont = "BP", term.width = 80, GO.enrich.p = 0.05, figure.title = "TimeHeatmap")
}
# To save time, directely load from extdata
demo.time.heatmap.path<-system.file("extdata", "Brain_TimeHeatmap.rda", package = "TrendCatcher")
load(demo.time.heatmap.path)
names(time_heatmap)
print(time_heatmap$time.heatmap)
??grid.text
library(ComplexHeatmap)
print(time_heatmap$time.heatmap)
class(time_heatmap$time.heatmap)
require("ComplexHeatmap")
print(time_heatmap$time.heatmap)
head(time_heatmap$merge.df[,1:5])
head(time_heatmap$GO.df[,1:5])
go.terms<-unique(time_heatmap$GO.df$Description)[1:5]
time_heatmap_selGO<-draw_TimeHeatmap_selGO(time_heatmap = time_heatmap, sel.go = go.terms, master.list = master.list, GO.perc.thres = 0, nDDEG.thres = 0, save.tiff.path = NA)
install()
go.terms<-unique(time_heatmap$GO.df$Description)[1:5]
time_heatmap_selGO<-draw_TimeHeatmap_selGO(time_heatmap = time_heatmap, sel.go = go.terms, master.list = master.list, GO.perc.thres = 0, nDDEG.thres = 0, save.tiff.path = NA)
go.terms<-c("response to lipopolysaccharide",
"response to interferon-beta",
"cytokine-mediated signaling pathway",
"response to interferon-gamma",
"response to virus",
"leukocyte migration",
"mitotic nuclear division",
"regulation of vasculature development",
"extracellular structure organization",
"regulation of epithelial cell proliferation")
gene.GO.df<-draw_GOHeatmap(master.list = master.list, time.window = "0h-6h",
go.terms = go.terms,  merge.df = time_heatmap$merge.df,
logFC.thres = 5)
install()
go.terms<-c("response to lipopolysaccharide",
"response to interferon-beta",
"cytokine-mediated signaling pathway",
"response to interferon-gamma",
"response to virus",
"leukocyte migration",
"mitotic nuclear division",
"regulation of vasculature development",
"extracellular structure organization",
"regulation of epithelial cell proliferation")
gene.GO.df<-draw_GOHeatmap(master.list = master.list, time.window = "0h-6h",
go.terms = go.terms,  merge.df = time_heatmap$merge.df,
logFC.thres = 5)
head(gene.GO.df)
library(TrendCatcher)
demo.master.list.path<-system.file("extdata", "BrainMasterList.rda", package = "TrendCatcher")
load(demo.master.list.path)
### In case bioMart has connection issue, you can load from example data
#gene.symbol.df<-get_GeneEnsembl2Symbol(ensemble.arr = master.list$master.table$Gene)
#master.table.new<-cbind(master.list$master.table, gene.symbol.df[match(master.list$master.table$Gene, gene.symbol.df$Gene), c("Symbol", "description")])
#master.list$master.table<-master.table.new
#head(master.list$master.table)
demo.master.list.path<-system.file("extdata", "BrainMasterList_Symbol.rda", package = "TrendCatcher")
load(demo.master.list.path)
head(master.list$master.table)
gene.symbol.arr<-unique(master.list$master.table$Symbol)[1:6]
p<-draw_GeneTraj(master.list = master.list, gene.symbol.arr = gene.symbol.arr, ncol = 3, nrow = 2)
gene.symbol.arr<-unique(master.list$master.table$Symbol)[1:6]
p<-draw_GeneTraj(master.list = master.list, gene.symbol.arr = gene.symbol.arr, ncol = 3, nrow = 2)
install()
gene.symbol.arr<-unique(master.list$master.table$Symbol)[1:6]
p<-draw_GeneTraj(master.list = master.list, gene.symbol.arr = gene.symbol.arr, ncol = 3, nrow = 2)
p
draw_TrajClusterGrid(master.list = master.list, min.traj.n = 10)
install()
draw_TrajClusterGrid(master.list = master.list, min.traj.n = 10)
draw_TrajClusterPie(master.list = master.list,inner.radius = 0.7, cex.out = 1, cex.in = 1, fig.title = "Hierarchical Pie Chart")
??group_by
install
install()
draw_TrajClusterPie(master.list = master.list,inner.radius = 0.7, cex.out = 1, cex.in = 1, fig.title = "Hierarchical Pie Chart")
build_vignettes(".", quiet = F)
library(TrendCatcher)
demo.master.list.path<-system.file("extdata", "BrainMasterList.rda", package = "TrendCatcher")
load(demo.master.list.path)
### In case bioMart has connection issue, you can load from example data
#gene.symbol.df<-get_GeneEnsembl2Symbol(ensemble.arr = master.list$master.table$Gene)
#master.table.new<-cbind(master.list$master.table, gene.symbol.df[match(master.list$master.table$Gene, gene.symbol.df$Gene), c("Symbol", "description")])
#master.list$master.table<-master.table.new
#head(master.list$master.table)
demo.master.list.path<-system.file("extdata", "BrainMasterList_Symbol.rda", package = "TrendCatcher")
load(demo.master.list.path)
head(master.list$master.table)
gene.symbol.arr<-unique(master.list$master.table$Symbol)[1:6]
p<-draw_GeneTraj(master.list = master.list, gene.symbol.arr = gene.symbol.arr, ncol = 3, nrow = 2)
p
draw_TrajClusterGrid(master.list = master.list, min.traj.n = 10)
draw_TrajClusterPie(master.list = master.list,inner.radius = 0.7, cex.out = 1, cex.in = 1, fig.title = "Hierarchical Pie Chart")
.Last.error.trace
par(mar=c(1,1,1,1))
draw_TrajClusterPie(master.list = master.list,inner.radius = 0.7, cex.out = 1, cex.in = 1, fig.title = "Hierarchical Pie Chart")
#par(mar=c(1,1,1,1))
#draw_TrajClusterPie(master.list = master.list,inner.radius = 0.7, cex.out = 1, cex.in = 1, fig.title = "Hierarchical Pie Chart")
install()
build_vignettes(".", quiet = F)
document()
build_manual()
build(".")
document()
document()
warnings()
document()
document()
build_manual()
build(".")
devtools::check()
usethis::use_package("ggplot2")
usethis::use_package("biomaRt")
usethis::use_package("scales")
usethis::use_package("rlang")
document()
install()
build(".")
document()
document()
build(".", vignettes = F)
build(".")
document()
warnings
warnings()
warnings()
document()
warnings()
warnings()
document()
warnings()
document()
warnings()
document()
build(".")
document()
build(".")
document()
document()
warnings()
document()
warnings()
document()
usethis::use_package("MASS")
?as.data.frame
??as.data.frame
??as.data.frame
warnings()
document()
document()
build(".")
library(biomaRt)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(snow)
library(Rcpp)
library(edgeR)
library(DESeq2)
library(ComplexHeatmap)
library(sva)
usethis::use_package("ComplexHeatmap")
document()
warnings()
document()
document()
document()
warnings()
document()
document()
document()
